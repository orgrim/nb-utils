#!/bin/sh

#
# Copyright 2011 Nicolas Thauvin. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

ARCH=`uname -m`
KERNCONF="GENERIC"
WORKDIR=$HOME/`basename $0`
OBJS=$WORKDIR/obj.$ARCH
REL=$WORKDIR/release
NOW=`date +%Y%m%d_%H%M`

backup_first() {
    was=`pwd`
    cd /

    echo "====> Backup first"

    # backup the kernel
    echo "Kernel -> /netbsd.$NOW"
    mv netbsd netbsd.$NOW

    # backup the modules. Heavy but effective
    echo "Modules -> /module_$NOW.tgz"
    tar czf modules_$NOW.tgz ./stand/$ARCH/*/modules

    cd $was
}

usage() {
    echo "usage: `basename $0` [options] [kernel_config]"
    echo "options:"
    echo "    -r dir         Release directory (where the sets are)"
    echo "    -o dir         Objects directory"
    echo "    -h             Print this help"
    echo $1
}

args=`getopt r:o:h $*`
if [ $? != 0 ]; then
    usage 1
fi

set -- $args
for o in $*; do
    case $o in
	-r) REL=$2; shift 2;;
	-o) OBJS=$2; shift 2;;
	-h) usage 1;;
	--) shift; break;;
    esac
done

# Use the name of the kernel config provided
if [ $# -ge 1 ]; then
    KERNCONF=$1
fi

# When the release dir is given, use it first
if [ -f $REL/$ARCH/binary/kernel/netbsd-$KERNCONF.gz -a -f $REL/$ARCH/binary/sets/modules.tgz ]; then

    backup_first

    echo "====> Install from sets"

    # copy the kernel
    echo "Kernel: $REL/$ARCH/binary/kernel/netbsd-$KERNCONF.gz"
    cp $REL/$ARCH/binary/kernel/netbsd-$KERNCONF.gz /netbsd.gz
    gunzip /netbsd.gz
    chmod 444 /netbsd
    
    # extract the new modules
    echo "Modules: $REL/$ARCH/binary/sets/modules.tgz"
    was=`pwd`
    cd /
    tar xzf $REL/$ARCH/binary/sets/modules.tgz
    cd $was

elif [ -f $OBJS/sys/arch/$ARCH/compile/$KERNCONF/netbsd -a -d $OBJS/destdir.$ARCH/stand ]; then
    
    backup_first

    echo "====> Install from object directory"

    # copy the kernel
    echo "Kernel: $OBJS/sys/arch/$ARCH/compile/$KERNCONF/netbsd"
    cp $OBJS/sys/arch/$ARCH/compile/$KERNCONF/netbsd /
    chmod 444 /netbsd

    # copy the modules
    echo "Modules: $OBJS/destdir.$ARCH/stand"
    was=`pwd`
    cd $OBJS/destdir.$ARCH
    pax -rwpe stand /
    cd $was

else
    echo "Could not find the sets or stuff in the object directory"
    exit 1
fi

# message
echo
echo "You may add an entry to boot your old kernel (netbsd.$NOW) to /boot.cfg"
echo
