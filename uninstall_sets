#!/usr/bin/env perl -w

#
# Copyright 2011 Nicolas Thauvin. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

use strict;
use Getopt::Long;
use File::Basename;

sub usage {
    print qq{usage: $0 [options] set_list [set_list ...]
options:
    -y, --yes        Really remove the files and directories of the set
    -v, --verbose    Verbose mode

    -h, --help       Print help

};
    exit 1;
}

my $opt_yes;
my $opt_verbose;
my $opt_help;

GetOptions("yes" => \$opt_yes,
           "verbose" => \$opt_verbose,
           "help" => \$opt_help) or die usage();
usage() if $opt_help;

if (!defined $ARGV[0]) {
    print qq{give a paths to set lists\n};
    exit(1);
}

foreach my $setlist (@ARGV) {
    my @files;
    my @dirs;

    print qq{Processing $setlist\n};

    unless (open (SET, $setlist)) {
	warn qq{cannot open $setlist: $!\n};
	next;
    }

    while (<SET>) {
	my ($path, $type, $uname, $gname, $mode, $size, $sum) = split;

	if ($type =~ m/^type=(\S+)$/) {
	    if ($1 eq "dir") {
		push @dirs, $path if $size ne "optional";
	    } elsif ($1 eq "file" or $1 eq "link") {
		push @files, $path;
	    }
	} else {
	    $path =~ s/^\.//;
	    if (-d $path) {
		push @dirs, $path;
	    } else {
		push @files, $path;
		push @dirs, dirname $path;
	    }
	}
    }

    close(SET);

    print qq{Removing files...\n};

    foreach my $file (@files) {
	$file =~ s/^\.//;
	next if ($file eq $setlist);
	print qq{Removing file: $file\n} if $opt_verbose;
	if ($opt_yes) {
	    unlink($file) or warn qq{Could not remove $file: $!\n};
	}
    }

    print qq{Removing directories...\n};

    my %h = map { $_, 1 } @dirs;
    @dirs = keys %h;
    foreach my $dir (sort { $b cmp $a } @dirs) {
	$dir =~ s/^\.//;
	next if ($dir eq dirname($setlist));
	print qq{Removing directory: $dir\n} if $opt_verbose;
	if ($opt_yes) {
	    rmdir($dir) or warn qq{Could not remove $dir: $!\n};
	}
    }

}
