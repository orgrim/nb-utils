#!/bin/sh

# This is a wrapper around /usr/pkgsrc/mk/bulk stuff
# to make my automated partial bulk build happen.

pkgsrc=/usr/pkgsrc
sandbox=/usr/sandbox
partial="yes"
umount_after="yes"
upload="yes"
config="$pkgsrc/mk/bulk/build.conf"
log="no"
cvs_up="no"

usage() {
	echo "usage: `basename $0` [options] [sandbox]"
	echo "options:"
	echo "	  -p dir    Path to pkgsrc directory"
	echo "	  -c conf   Bulk build configuration file"
	echo "	  -S	    Do not do a partial build"
	echo "	  -U	    Do not umount sandbox after build"
	echo "	  -R	    Do not rsync the result"
	echo "	  -l	    Log to a file"
	echo "	  -u	    Update PKGSRC from cvs first"
	echo
	echo "	  -h	    Print this help"
	echo
	exit $1
}

die() {
	echo "ERROR: $@" 1>&2
	exit 1
}

args=`getopt p:c:SURluh $*`
if [ $? != 0 ]; then
	usage 1
fi

set -- $args
for o in $*; do
	case $o in
		-p) pkgsrc=$2; shift 2;;
		-c) config=$2; shift 2;;
		-S) partial="no"; shift;;
		-U) umount_after="no"; shift;;
		-R) upload="no"; shift;;
		-l) log="yes"; shift;;
		-u) cvs_up="yes"; shift;;
		-h) usage 1;;
		--) shift; break;;
	esac
done


if [ $log = "yes" ]; then
	logfile="$pkgsrc/`basename $0`-`date +%Y%m%d.%H%M`.log"
	exec 1>$logfile 2>&1
fi

# run the upload script anyway and tell it whether to upload or not
if [ $upload != "yes" ]; then
	upload_opts="$upload_opts -n"
fi

# take care of the configuration file
echo $config | grep -q '\/'
if [ $? != 0 ]; then
	config="$pkgsrc/mk/bulk/$config"
fi

build_opts="$build_opts -c $config"
upload_opts="$upload_opts -c $config"

# Custom sandbox path as first arg
if [ -n "$1" ]; then
	sandbox=$1
fi

# Check if $pkgsrc exists
if [ ! -d $pkgsrc ]; then
	die "bad pkgsrc directory: $pkgsrc"
fi

# Put a lock file in /usr/pkgsrc that can be checked by other scripts,
# and by us too.
lockfile=$pkgsrc/.bulklock
if [ ! -f $lockfile ]; then
	echo "$$: bulk build in progress" > $lockfile
else
	echo "INFO: lockfile found aborting"
	exit 0
fi

# First cvs up in $pkgsrc if required
if [ $cvs_up = "yes" ]; then
	echo "INFO: updating $pkgsrc from cvs"
	was=`pwd`
	cd $pkgsrc && cvs -q -z3 update -dP
	cd $was
fi

# Mount the sandbox, it can be already mounted.
# Do it here so we can forget about it
if [ -f $sandbox/sandbox ]; then
	mount | grep $sandbox/bin >/dev/null 2>&1
	if [ $? != 0 ]; then
		sh $sandbox/sandbox mount || die "cannot mount sandbox $sandbox"
	fi
else
	die "$sandbox/sandbox script does not exist"
fi

# Launch the build
[ $partial = "yes" ] && build_opts="$build_opts -s"

# run the bulk build (taken from do-sandbox-build)
sh="/bin/sh"
build="mk/bulk/build"

chroot $sandbox $sh -c "cd $pkgsrc && exec $sh $build \"\$@\"" $build $build_opts
if [ $? != 0 ]; then
	die "bulk build failed"
fi

# Upload the summary and the checksums
if [ -f $config ]; then
	. $config

	# Clean up packages
	echo "INFO: cleaning old versions of packages"
	lintpkgsrc -r -p >/dev/null 2>&1

	# Get the packages directory, from make and create the summary file
	echo "INFO: creating the pkg_summary file"
	package_dir="`cd $pkgsrc/pkgtools/lintpkgsrc; make show-var VARNAME=PACKAGES`"

	cd $package_dir/All && pkg_info -X *.tgz | bzip2 > pkg_summary.bz2
fi

if [ $upload = "yes" ]; then
	if [ -n "$RSYNC_DST" ]; then
		echo "INFO: rsync'ing packages to $RSYNC_DST"
		rsync $RSYNC_OPTS -av $package_dir/ $RSYNC_DST
	fi
fi

# Remove the lock file
rm $lockfile

# Umount the sandbox
if [ $umount_after = "yes" ]; then
	sh $sandbox/sandbox umount || die "cannot umount sandbox $sandbox"
fi

exit 0
